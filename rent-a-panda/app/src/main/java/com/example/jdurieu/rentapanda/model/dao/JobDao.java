package com.example.jdurieu.rentapanda.model.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.example.jdurieu.rentapanda.model.Job;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "JOB".
*/
public class JobDao extends AbstractDao<Job, String> {

    public static final String TABLENAME = "JOB";

    /**
     * Properties of entity Job.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property __status = new Property(0, String.class, "__status", false, "__STATUS");
        public final static Property Customer_name = new Property(1, String.class, "customer_name", false, "CUSTOMER_NAME");
        public final static Property Distance = new Property(2, String.class, "distance", false, "DISTANCE");
        public final static Property Job_date = new Property(3, java.util.Date.class, "job_date", false, "JOB_DATE");
        public final static Property Extras = new Property(4, String.class, "extras", false, "EXTRAS");
        public final static Property Order_duration = new Property(5, String.class, "order_duration", false, "ORDER_DURATION");
        public final static Property Order_id = new Property(6, String.class, "order_id", true, "ORDER_ID");
        public final static Property Order_time = new Property(7, String.class, "order_time", false, "ORDER_TIME");
        public final static Property Payment_method = new Property(8, String.class, "payment_method", false, "PAYMENT_METHOD");
        public final static Property Price = new Property(9, String.class, "price", false, "PRICE");
        public final static Property Recurrency = new Property(10, Integer.class, "recurrency", false, "RECURRENCY");
        public final static Property Job_city = new Property(11, String.class, "job_city", false, "JOB_CITY");
        public final static Property Job_latitude = new Property(12, String.class, "job_latitude", false, "JOB_LATITUDE");
        public final static Property Job_longitude = new Property(13, String.class, "job_longitude", false, "JOB_LONGITUDE");
        public final static Property Job_postalcode = new Property(14, Integer.class, "job_postalcode", false, "JOB_POSTALCODE");
        public final static Property Job_street = new Property(15, String.class, "job_street", false, "JOB_STREET");
        public final static Property Status = new Property(16, String.class, "status", false, "STATUS");
    };


    public JobDao(DaoConfig config) {
        super(config);
    }
    
    public JobDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"JOB\" (" + //
                "\"__STATUS\" TEXT," + // 0: __status
                "\"CUSTOMER_NAME\" TEXT," + // 1: customer_name
                "\"DISTANCE\" TEXT," + // 2: distance
                "\"JOB_DATE\" INTEGER," + // 3: job_date
                "\"EXTRAS\" TEXT," + // 4: extras
                "\"ORDER_DURATION\" TEXT," + // 5: order_duration
                "\"ORDER_ID\" TEXT PRIMARY KEY NOT NULL ," + // 6: order_id
                "\"ORDER_TIME\" TEXT," + // 7: order_time
                "\"PAYMENT_METHOD\" TEXT," + // 8: payment_method
                "\"PRICE\" TEXT," + // 9: price
                "\"RECURRENCY\" INTEGER," + // 10: recurrency
                "\"JOB_CITY\" TEXT," + // 11: job_city
                "\"JOB_LATITUDE\" TEXT," + // 12: job_latitude
                "\"JOB_LONGITUDE\" TEXT," + // 13: job_longitude
                "\"JOB_POSTALCODE\" INTEGER," + // 14: job_postalcode
                "\"JOB_STREET\" TEXT," + // 15: job_street
                "\"STATUS\" TEXT);"); // 16: status
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"JOB\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Job entity) {
        stmt.clearBindings();
 
        String __status = entity.get__status();
        if (__status != null) {
            stmt.bindString(1, __status);
        }
 
        String customer_name = entity.getCustomer_name();
        if (customer_name != null) {
            stmt.bindString(2, customer_name);
        }
 
        String distance = entity.getDistance();
        if (distance != null) {
            stmt.bindString(3, distance);
        }
 
        java.util.Date job_date = entity.getJob_date();
        if (job_date != null) {
            stmt.bindLong(4, job_date.getTime());
        }
 
        String extras = entity.getExtras();
        if (extras != null) {
            stmt.bindString(5, extras);
        }
 
        String order_duration = entity.getOrder_duration();
        if (order_duration != null) {
            stmt.bindString(6, order_duration);
        }
 
        String order_id = entity.getOrder_id();
        if (order_id != null) {
            stmt.bindString(7, order_id);
        }
 
        String order_time = entity.getOrder_time();
        if (order_time != null) {
            stmt.bindString(8, order_time);
        }
 
        String payment_method = entity.getPayment_method();
        if (payment_method != null) {
            stmt.bindString(9, payment_method);
        }
 
        String price = entity.getPrice();
        if (price != null) {
            stmt.bindString(10, price);
        }
 
        Integer recurrency = entity.getRecurrency();
        if (recurrency != null) {
            stmt.bindLong(11, recurrency);
        }
 
        String job_city = entity.getJob_city();
        if (job_city != null) {
            stmt.bindString(12, job_city);
        }
 
        String job_latitude = entity.getJob_latitude();
        if (job_latitude != null) {
            stmt.bindString(13, job_latitude);
        }
 
        String job_longitude = entity.getJob_longitude();
        if (job_longitude != null) {
            stmt.bindString(14, job_longitude);
        }
 
        Integer job_postalcode = entity.getJob_postalcode();
        if (job_postalcode != null) {
            stmt.bindLong(15, job_postalcode);
        }
 
        String job_street = entity.getJob_street();
        if (job_street != null) {
            stmt.bindString(16, job_street);
        }
 
        String status = entity.getStatus();
        if (status != null) {
            stmt.bindString(17, status);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6);
    }    

    /** @inheritdoc */
    @Override
    public Job readEntity(Cursor cursor, int offset) {
        Job entity = new Job( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // __status
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // customer_name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // distance
            cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)), // job_date
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // extras
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // order_duration
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // order_id
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // order_time
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // payment_method
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // price
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // recurrency
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // job_city
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // job_latitude
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // job_longitude
            cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14), // job_postalcode
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // job_street
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // status
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Job entity, int offset) {
        entity.set__status(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setCustomer_name(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDistance(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setJob_date(cursor.isNull(offset + 3) ? null : new java.util.Date(cursor.getLong(offset + 3)));
        entity.setExtras(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setOrder_duration(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setOrder_id(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setOrder_time(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPayment_method(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPrice(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRecurrency(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setJob_city(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setJob_latitude(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setJob_longitude(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setJob_postalcode(cursor.isNull(offset + 14) ? null : cursor.getInt(offset + 14));
        entity.setJob_street(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setStatus(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Job entity, long rowId) {
        return entity.getOrder_id();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Job entity) {
        if(entity != null) {
            return entity.getOrder_id();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
